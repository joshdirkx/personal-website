name: deploy application

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: run terraform

    defaults:
      run:
        working-directory: ./terraform

    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: extract branch name
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: format
        id: fmt
        run: |
          terraform fmt \
          -check

      - name: initialize
        id: init
        run: |
          terraform init \
          --backend-config="bucket=${{ secrets.AWS_S3_STATE_BUCKET }}" \
          --backend-config="key=${{ github.event.repository.name }}/${{ steps.extract_branch.outputs.branch }}" \
          --backend-config="region=${{ secrets.AWS_REGION }}"

      - name: validate
        id: validate
        run: |
          terraform validate \
          -no-color

      - name: plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          terraform plan \
          -no-color \
          -input=false
        continue-on-error: true

      - name: comment on pull request
        uses: actions/github-script@master
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: plan status
        if: steps.plan.outcome == 'failure'
        run: |
          exit 1

      - name: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply \
          -auto-approve \
          -input=false


  build:
    needs: terraform

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: setup node
        uses: actions/setup-node@master
        with:
          node-version: 18

      - name: install dependencies
        run: npm install

      - name: build
        run: npm run build

      - name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: build
          path: frontend/build

  deploy:
    needs: build

    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: download artifacts
        uses: actions/download-artifact@master
        with:
          name: build
          path: frontend/build

      - name: Remove existing artifacts from AWS S3
        run: |
          aws s3 rm \
          ${{ secrets.AWS_S3_WEBSITE_BUCKET }} \
          --recursive \
          --region ${{ secrets.AWS_REGION }}

      - name: Deploy artifacts to AWS S3
        run: |
          aws s3 cp \
          ./build \
          ${{ secrets.AWS_S3_WEBSITE_BUCKET }} \
          --recursive \
          --acl public-read \
          --region ${{ secrets.AWS_REGION }}
